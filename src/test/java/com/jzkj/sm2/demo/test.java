package com.jzkj.sm2.demo;

import cn.hutool.core.codec.Base64;
import cn.hutool.core.util.CharsetUtil;
import cn.hutool.core.util.HexUtil;
import cn.hutool.crypto.SmUtil;
import cn.hutool.crypto.asymmetric.KeyType;
import cn.hutool.crypto.asymmetric.SM2;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class test {
    public static void main(String[] args) {
        //使用对面的公钥，和自身的私钥 组成SM2
//        String body = "{\"sign\":\"3046022100c28b49e293f901b9e8c78ab3db09dc877dd45618f531af4c09bf4a4c1fba4d240221008a26d809c597a857307ce7ebc5718624cb5582e6f0b47f6aa8e5557d48413a6b\",\"cryptoData}";
//        log.info("body>>" + body);
        String privateKey = "MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQgVmbnhV5d2gOfKOWUvjR1FTA8Fj9x6f4ppaN+2DcgQs+gCgYIKoEcz1UBgi2hRANCAAQczWG4I8p3/cyw6AnsI5mAvHaVsRpOOvDJZUTMY0iMXGSJXS6Em/QWf4dsNI0lF/0dP/R3V1KsKJC901V4EQ41";
        String publicKey = "MFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEboM143KMjdNkJlm8MlOesCgtKdPFLOqi5vqxxQuTfpnPEy6EeTnmgCnrVO4eIjU3m1Qha33QUmwkDiaWSZXHZg==";
        log.info("publicKey>>" + publicKey);
        log.info("privateKey>>" + privateKey);
        SM2 sm2 = SmUtil.sm2(Base64.decode(privateKey), Base64.decode(publicKey));

//        //解析请求加密数据体JSON
//        JSONObject bodyJson = JSON.parseObject(body);
//        //获取请求业务数据加密字符串
//        String cryptoData = bodyJson.getString("cryptoData");
//        log.info("cryptoData>>" + cryptoData);
//        //获取请求业务数据签名
//        String sign = bodyJson.getString("sign");
//        log.info("sign>>" + sign);
//        //使用自身私钥进行解密
//        String data = sm2.decryptStr(cryptoData, KeyType.PrivateKey);
//        log.info("data>>" + data);
//        //使用中心公钥进行验签
//        boolean verify = sm2.verify(data.getBytes(), HexUtil.decodeHex(sign));
//        log.info("verify>>" + verify);
//		/*if (verify == false){
//			throw new Exception("签名不一致");
//		}*/
        //获取返回的数据
        String responseBody = "{\"sign\":\"3046022100c28b49e293f901b9e8c78ab3db09dc877dd45618f531af4c09bf4a4c1fba4d240221008a26d809c597a857307ce7ebc5718624cb5582e6f0b47f6aa8e5557d48413a6b\",\"cryptoData}";
        log.info("获取返回的数据......."+responseBody);
        //将返回的数据进行JSON解析
        JSONObject responseBodyJson = JSON.parseObject(responseBody);
        log.info("将返回的数据进行JSON解析......."+responseBodyJson);
        //获取加密数据体
        String responseCryptoData = responseBodyJson.getString("cryptoData");
        log.info("获取加密数据体......."+responseCryptoData);
        //获取数据签名
        String responseSign = responseBodyJson.getString("sign");
        log.info("获取数据签名......."+responseSign);
        //使用自己的私钥进行解密

        String responseData = sm2.decryptStr(responseCryptoData, KeyType.PrivateKey);
        log.info("使用私钥进行解密完毕.............."+responseData);


////        SM2 sm2 = SmUtil.sm2(privateKey, publicKey);
////        String cipher = sm2.encryptHex("111111", KeyType.PublicKey);
//        String cryptoData = sm2.encryptBcd("123123", KeyType.PublicKey);
//        log.info("cryptoData="+cryptoData);
//        SM2 sm22 = SmUtil.sm2(Base64.decode(privateKey), Base64.decode(publicKey));
//        String plaintext = sm22.decryptStr(cryptoData, KeyType.PrivateKey, CharsetUtil.CHARSET_UTF_8);
//        log.info(plaintext);
    }
}
